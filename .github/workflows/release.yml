name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux-x86_64:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2024-06-20
        components: rustfmt, clippy

    - name: Clean cargo cache and update toolchain
      run: |
        cargo clean
        rustup update
        rustup default nightly-2024-06-20

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Extract version from tag or commit
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-${GITHUB_SHA:0:7}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Build for Linux (x86_64)
      run: cargo build --release --target x86_64-unknown-linux-gnu

    - name: Upload Linux x86_64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-x86_64
        path: target/x86_64-unknown-linux-gnu/release/dargo

  build-linux-aarch64:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2024-06-20
        components: rustfmt, clippy

    - name: Clean cargo cache and update toolchain
      run: |
        cargo clean
        rustup update
        rustup default nightly-2024-06-20

    - name: Install cross-compilation toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        rustup target add aarch64-unknown-linux-gnu

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build for Linux (ARM64)
      run: |
        export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
        export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
        export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
        cargo build --release --target aarch64-unknown-linux-gnu

    - name: Upload Linux ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-aarch64
        path: target/aarch64-unknown-linux-gnu/release/dargo

  build-linux-armv7:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2024-06-20
        components: rustfmt, clippy

    - name: Clean cargo cache and update toolchain
      run: |
        cargo clean
        rustup update
        rustup default nightly-2024-06-20

    - name: Install cross-compilation toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-linux-gnueabihf
        rustup target add armv7-unknown-linux-gnueabihf

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build for Linux (ARMv7)
      run: |
        export CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc
        export CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++
        export AR_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-ar
        cargo build --release --target armv7-unknown-linux-gnueabihf

    - name: Upload Linux ARMv7 artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-armv7
        path: target/armv7-unknown-linux-gnueabihf/release/dargo

  build-macos-x86_64:
    runs-on: macos-15
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2024-06-20
        components: rustfmt, clippy

    - name: Clean cargo cache and update toolchain
      run: |
        cargo clean
        rustup update
        rustup default nightly-2024-06-20

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Extract version from tag or commit
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-${GITHUB_SHA:0:7}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Build for macOS (x86_64) - Native
      run: |
        # Build natively for the runner's architecture
        cargo build --release

    - name: Upload macOS x86_64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-x86_64
        path: target/release/dargo

  build-macos-aarch64:
    runs-on: macos-15
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2024-06-20
        components: rustfmt, clippy

    - name: Clean cargo cache and update toolchain
      run: |
        cargo clean
        rustup update
        rustup default nightly-2024-06-20

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Extract version from tag or commit
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-${GITHUB_SHA:0:7}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Build for macOS (ARM64) - Native
      run: |
        # Build natively for the runner's architecture
        cargo build --release

    - name: Upload macOS ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-aarch64
        path: target/release/dargo

  # build-windows:
  #   runs-on: windows-2025
  #   permissions:
  #     contents: write
  #     packages: write
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0

  #   - name: Install Rust
  #     uses: dtolnay/rust-toolchain@master
  #     with:
  #       toolchain: nightly-2025-07-05
  #       components: rustfmt, clippy

  #   - name: Cache cargo registry
  #     uses: actions/cache@v4
  #     with:
  #       path: |
  #         ~/.cargo/registry
  #         ~/.cargo/git
  #         target
  #       key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #       restore-keys: |
  #         ${{ runner.os }}-cargo-

  #   - name: Extract version from tag or commit
  #     id: get_version
  #     run: |
  #       if ($env:GITHUB_REF -like "refs/tags/*") {
  #         $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
  #       } else {
  #         $VERSION = "dev-$($env:GITHUB_SHA.Substring(0,7))"
  #       }
  #       echo "version=$VERSION" >> $env:GITHUB_OUTPUT
  #       echo "Release version: $VERSION"

  #   - name: Build for Windows (x86_64)
  #     run: cargo build --release --target x86_64-pc-windows-msvc

  #   - name: Upload Windows artifacts
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: windows-binaries
  #       path: target/x86_64-pc-windows-msvc/release/dargo.exe

  debug-build:
    needs: [build-linux-x86_64, build-linux-aarch64, build-linux-armv7, build-macos-x86_64, build-macos-aarch64]
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    steps:
    - name: Debug Build Status
      run: |
        echo "âœ… All builds completed successfully!"
        echo "Version: ${{ needs.build-linux-x86_64.outputs.version }}"
        echo "This was a debug build triggered by push to main branch"
        echo "To create a release, push a tag like 'v1.0.0'"

  create-release:
    needs: [build-linux-x86_64, build-linux-aarch64, build-linux-armv7, build-macos-x86_64, build-macos-aarch64]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy Linux binaries
        cp artifacts/linux-x86_64/dargo release-assets/dargo-linux-x86_64
        chmod +x release-assets/dargo-linux-x86_64
        
        cp artifacts/linux-aarch64/dargo release-assets/dargo-linux-aarch64
        chmod +x release-assets/dargo-linux-aarch64
        
        cp artifacts/linux-armv7/dargo release-assets/dargo-linux-armv7
        chmod +x release-assets/dargo-linux-armv7
        
        # Copy macOS binaries
        cp artifacts/macos-x86_64/dargo release-assets/dargo-macos-x86_64
        chmod +x release-assets/dargo-macos-x86_64
        
        cp artifacts/macos-aarch64/dargo release-assets/dargo-macos-aarch64
        chmod +x release-assets/dargo-macos-aarch64
        
        # Copy Windows binary (commented out)
        # cp artifacts/windows-binaries/dargo.exe release-assets/dargo-windows-x86_64.exe

    - name: Create checksums
      run: |
        cd release-assets
        for file in *; do
          sha256sum "$file" > "${file}.sha256"
        done
        cd ..

    - name: Create release archive
      run: |
        cd release-assets
        tar -czf ../dargo-${{ needs.build-linux-x86_64.outputs.version }}-release.tar.gz *
        cd ..

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ needs.build-linux-x86_64.outputs.version }}
        body: |
          ## Dargo ${{ needs.build-linux-x86_64.outputs.version }}
          
          ### Downloads
          
          **Linux:**
          - [dargo-linux-x86_64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dargo-linux-x86_64) ([checksum](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dargo-linux-x86_64.sha256))
          - [dargo-linux-aarch64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dargo-linux-aarch64) ([checksum](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dargo-linux-aarch64.sha256))
          - [dargo-linux-armv7](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dargo-linux-armv7) ([checksum](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dargo-linux-armv7.sha256))
          
          **macOS:**
          - [dargo-macos-x86_64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dargo-macos-x86_64) ([checksum](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dargo-macos-x86_64.sha256))
          - [dargo-macos-aarch64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dargo-macos-aarch64) ([checksum](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dargo-macos-aarch64.sha256))
          
          **Windows:**
          - Windows builds are temporarily disabled
          
          **All platforms:**
          - [dargo-${{ needs.build-linux-x86_64.outputs.version }}-release.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dargo-${{ needs.build-linux-x86_64.outputs.version }}-release.tar.gz)
          
          ### Installation
          
          Download the appropriate binary for your platform and make it executable:
          
          ```bash
          # Linux/macOS
          chmod +x dargo-<platform>
          sudo mv dargo-<platform> /usr/local/bin/dargo
          
          # Windows
          # Move dargo-windows-x86_64.exe to a directory in your PATH and rename to dargo.exe
          ```
          
          ### Verification
          
          Verify the integrity of your download using the provided checksums:
          
          ```bash
          sha256sum -c dargo-<platform>.sha256
          ```
        files: |
          release-assets/*
          dargo-${{ needs.build-linux-x86_64.outputs.version }}-release.tar.gz
        draft: false
        prerelease: false
