type LolProps = { x: { x: String }, y: Bool, z: String[]};

component Lol(props : { x: { x: String }, y: Bool, z: String[]}) tsx {
    const hello = props.y;
    return (
        <>
            <h1>yoo</h1>
            {props.x.x}
            {props.z.map(x => <p>{x}</p>)}
            {props.y ? <p>hello true</h1> : <p>hello false</p>}
            {!hello ? <p>hello true</h1> : <p>hello false</p>}
        </>
    );
}

component Counter(props: { initial: Int }) tsx {
	const [value, setValue] = useState(0);
	const y = true;
	return (
		<>
		    <std::lol/>
			<div>{props.initial}: {value}</div>
			<Lol/>
			{y ? <p>bool is true</p> : <p>bool is false</p>}
			<button onClick={() => setValue(value + 1)}>Increment</button>
			<button onClick={() => setValue(value - 1)}>Decrement</button>
			<button onClick={() => console.log(x, y)}>Log</button>
		</>
	);
}

template Page(props: { title: String, x: String[] }) duckx {
    return (
        <>
            <!doctype html>
            <html>
            <Counter initial={} yo moin={props.title}/>
            <body>
            </body>
            </html>
        </>
    );
}

fn render(x: {}) -> String {
    go {
        renderer, _ := x.(func (env *TemplEnv) string)
	    env := TemplEnv{[]string{}, []RenderCall{}}
		res := renderer(&env)

		prelude := `
    <script type="module">
    import { h, render } from "https://esm.sh/preact";
    import { useState } from "https://esm.sh/preact/hooks";
    import htm from "https://esm.sh/htm";

    // Initialize htm with Preact
    const html = htm.bind(h);
    `

        for _, e := range env.ClientComponents {
            prelude += e
            prelude += "\n"
        }

        for _, e := range env.RenderCalls {
            prelude += fmt.Sprintf("document.querySelectorAll(\"[duckx-render=\\\"%s\\\").forEach(e => render(html`%s`, e)", e.Id, e.Jsx)
        }

        prelude += "\n</script>"

		return ConcDuckString { res + prelude }
    }
}

fn main() {
    std::http::serve_string("/", render(Page({title: "yo", x: .String[]})));

    std::http::listen(8080);
}
