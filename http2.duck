type LolProps = { x: { x: String }, y: Bool, z: String[]};

component Lol(props : { x: { x: String }, y: Bool, z: String[]}) tsx {
    const hello = props.y;
    return (
        <>
            <h1>yoo</h1>
            {props.x.x}
            {props.z.map(x => <p>{x}</p>)}
            {props.y ? <p>hello true</h1> : <p>hello false</p>}
            {!hello ? <p>hello true</h1> : <p>hello false</p>}
        </>
    );
}

component Counter(props: { initial: Int }) tsx {
	const [value, setValue] = useState(0);
	const y = true;
	return (
		<>
		    <std::lol/>
			<div>{props.initial}: {value}</div>
			<Lol/>
			{y ? <p>bool is true</p> : <p>bool is false</p>}
			<button onClick={() => setValue(value + 1)}>Increment</button>
			<button onClick={() => setValue(value - 1)}>Decrement</button>
			<button onClick={() => console.log(x, y)}>Log</button>
		</>
	);
}

template Page(props: { title: String, x: String[] }) duckx {
    return (
        <>
            <html>
            <Counter initial={} yo moin={props.title}/>
            <body>
            </body>
            </html>
        </>
    );
}

fn render(x: {}) -> (String, String) {
    go {
        renderer, _ := x.(func (env *TemplEnv) string)
	    env := &TemplEnv{[]string{}, []RenderCall{}}
		return Tup_DuckString_DuckString { ConcDuckString { renderer(env) }, ConcDuckString { fmt.Sprintf("%s", *env) } }
    }
}

fn main() {
    let res = render(Page({title: "Hallo", x: .String[]}));
    std::io::println(res.0);
    std::io::println(res.1);
    std::http::serve_component<{ initial: Int }>(
        "/",
        Counter,
        fn () -> { initial: Int } {
            return { initial: 1337 };
        }
    );

    std::http::serve_component<LolProps>(
        "/lol",
        Lol,
        fn () -> LolProps {
           return { x: { x: "Hallo" }, y: true, z: ["Hallo", "welt"] };
        }
    );

    std::http::listen(8080);
}
