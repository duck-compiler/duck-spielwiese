{
    "stdout": " type resolve  sort fields\n type resolve  insert type definitions\n type resolve  resolve aliases in function signatures and prepare function types\n type resolve  typeresolve functions\n\n\n\n\n-------------------------------\nin value expr Block([(VarDecl((Declaration { name: \"str\", type_expr: (ConstString(\"const string\"), 25..39), initializer: Some((String(\"other const string\"), 42..62)) }, 42..62)), 16..62), (Tuple([]), 0..1)])\n\n\n\n\n-------------------------------\nin value expr VarDecl((Declaration { name: \"str\", type_expr: (ConstString(\"const string\"), 25..39), initializer: Some((String(\"other const string\"), 42..62)) }, 42..62))\n\n\n\n\n-------------------------------\nin value expr String(\"other const string\")\nreturn none for String(\"other const string\")\n\n\n\n\n-------------------------------\nin value expr Tuple([])\nmain\n\n\n\n\n-------------------------------\nin value expr Block([(InlineGo(\"\\n        fmt.Println(str.as_dgo_string());\\n    \"), 45..97)])\n\n\n\n\n-------------------------------\nin value expr InlineGo(\"\\n        fmt.Println(str.as_dgo_string());\\n    \")\nstd_____io_____println\n\n\n\n\n-------------------------------\nin value expr Block([(InlineGo(\"\\n        go x()\\n    \"), 30..55)])\n\n\n\n\n-------------------------------\nin value expr InlineGo(\"\\n        go x()\\n    \")\nstd_____task_____spawn\n\n\n\n\n-------------------------------\nin value expr Block([(Match { value_expr: (Variable(true, \"d\", None), 115..116), arms: [MatchArm { type_case: (TypeName(false, \"std_____time_____Millis\", None), 128..134), bound_to_identifier: \"millis\", value_expr: (InlineGo(\" time.Sleep(time.Duration(millis.Getmillis().as_dgo_int()) * time.Millisecond) \"), 145..229) }, MatchArm { type_case: (TypeName(false, \"std_____time_____Seconds\", None), 239..246), bound_to_identifier: \"seconds\", value_expr: (InlineGo(\" time.Sleep(time.Duration(seconds.Getseconds().as_dgo_int()) * time.Second) \"), 258..339) }, MatchArm { type_case: (TypeName(false, \"std_____time_____Minutes\", None), 349..356), bound_to_identifier: \"minutes\", value_expr: (InlineGo(\" time.Sleep(time.Duration(minutes.Getminutes().as_dgo_int()) * time.Minute) \"), 368..449) }, MatchArm { type_case: (TypeName(false, \"std_____time_____Hours\", None), 459..464), bound_to_identifier: \"hours\", value_expr: (InlineGo(\" time.Sleep(time.Duration(hours.Gethours().as_dgo_int()) * time.Hour) \"), 474..549) }, MatchArm { type_case: (TypeName(false, \"std_____time_____Days\", None), 559..563), bound_to_identifier: \"days\", value_expr: (InlineGo(\" time.Sleep(time.Duration(days.Getdays().as_dgo_int()) * 24 * time.Hour) \"), 572..650) }] }, 108..657)])\n\n\n\n\n-------------------------------\nin value expr Match { value_expr: (Variable(true, \"d\", None), 115..116), arms: [MatchArm { type_case: (TypeName(false, \"std_____time_____Millis\", None), 128..134), bound_to_identifier: \"millis\", value_expr: (InlineGo(\" time.Sleep(time.Duration(millis.Getmillis().as_dgo_int()) * time.Millisecond) \"), 145..229) }, MatchArm { type_case: (TypeName(false, \"std_____time_____Seconds\", None), 239..246), bound_to_identifier: \"seconds\", value_expr: (InlineGo(\" time.Sleep(time.Duration(seconds.Getseconds().as_dgo_int()) * time.Second) \"), 258..339) }, MatchArm { type_case: (TypeName(false, \"std_____time_____Minutes\", None), 349..356), bound_to_identifier: \"minutes\", value_expr: (InlineGo(\" time.Sleep(time.Duration(minutes.Getminutes().as_dgo_int()) * time.Minute) \"), 368..449) }, MatchArm { type_case: (TypeName(false, \"std_____time_____Hours\", None), 459..464), bound_to_identifier: \"hours\", value_expr: (InlineGo(\" time.Sleep(time.Duration(hours.Gethours().as_dgo_int()) * time.Hour) \"), 474..549) }, MatchArm { type_case: (TypeName(false, \"std_____time_____Days\", None), 559..563), bound_to_identifier: \"days\", value_expr: (InlineGo(\" time.Sleep(time.Duration(days.Getdays().as_dgo_int()) * 24 * time.Hour) \"), 572..650) }] }\n\n\n\n\n-------------------------------\nin value expr Variable(true, \"d\", None)\nreturn none for Variable(true, \"d\", None)\n\n\n\n\n-------------------------------\nin value expr InlineGo(\" time.Sleep(time.Duration(millis.Getmillis().as_dgo_int()) * time.Millisecond) \")\n\n\n\n\n-------------------------------\nin value expr InlineGo(\" time.Sleep(time.Duration(seconds.Getseconds().as_dgo_int()) * time.Second) \")\n\n\n\n\n-------------------------------\nin value expr InlineGo(\" time.Sleep(time.Duration(minutes.Getminutes().as_dgo_int()) * time.Minute) \")\n\n\n\n\n-------------------------------\nin value expr InlineGo(\" time.Sleep(time.Duration(hours.Gethours().as_dgo_int()) * time.Hour) \")\n\n\n\n\n-------------------------------\nin value expr InlineGo(\" time.Sleep(time.Duration(days.Getdays().as_dgo_int()) * 24 * time.Hour) \")\nstd_____task_____sleep\n\n\n\n\n-------------------------------\nin value expr Block([(VarDecl((Declaration { name: \"res\", type_expr: (String, 67..73), initializer: None }, 62..65)), 58..73), (InlineGo(\"\\n        res = ConcDuckString { value: strings.ToUpper(s.as_dgo_string()) }\\n    \"), 79..164), (Return(Some((Variable(true, \"res\", None), 176..179))), 169..179), (Tuple([]), 0..1)])\n\n\n\n\n-------------------------------\nin value expr VarDecl((Declaration { name: \"res\", type_expr: (String, 67..73), initializer: None }, 62..65))\n\n\n\n\n-------------------------------\nin value expr InlineGo(\"\\n        res = ConcDuckString { value: strings.ToUpper(s.as_dgo_string()) }\\n    \")\n\n\n\n\n-------------------------------\nin value expr Return(Some((Variable(true, \"res\", None), 176..179)))\n\n\n\n\n-------------------------------\nin value expr Variable(true, \"res\", None)\nreturn none for Variable(true, \"res\", None)\n\n\n\n\n-------------------------------\nin value expr Tuple([])\nstd_____string_____to_upper\n\n\n\n\n-------------------------------\nin value expr Block([(VarDecl((Declaration { name: \"res\", type_expr: (String, 232..238), initializer: None }, 227..230)), 223..238), (InlineGo(\"\\n        res = ConcDuckString { value: strings.ToLower(s.as_dgo_string()) }\\n    \"), 244..329), (Return(Some((Variable(true, \"res\", None), 341..344))), 334..344), (Tuple([]), 0..1)])\n\n\n\n\n-------------------------------\nin value expr VarDecl((Declaration { name: \"res\", type_expr: (String, 232..238), initializer: None }, 227..230))\n\n\n\n\n-------------------------------\nin value expr InlineGo(\"\\n        res = ConcDuckString { value: strings.ToLower(s.as_dgo_string()) }\\n    \")\n\n\n\n\n-------------------------------\nin value expr Return(Some((Variable(true, \"res\", None), 341..344)))\n\n\n\n\n-------------------------------\nin value expr Variable(true, \"res\", None)\nreturn none for Variable(true, \"res\", None)\n\n\n\n\n-------------------------------\nin value expr Tuple([])\nstd_____string_____to_lower\n type resolve  final resolve of all functions\ncheck compatability for required type 'String [const \"const string\"]' and given type 'String [const \"other const string\"]'\n",
    "stderr": "\u001b[31mError:\u001b[0m Incompatible Types\n   \u001b[38;5;246m\u256d\u001b[0m\u001b[38;5;246m\u2500\u001b[0m\u001b[38;5;246m[\u001b[0m require_string_literal_give_wrong_const_string.duck:2:14 \u001b[38;5;246m]\u001b[0m\n   \u001b[38;5;246m\u2502\u001b[0m\n \u001b[38;5;246m2 \u2502\u001b[0m \u001b[38;5;249m \u001b[0m\u001b[38;5;249m \u001b[0m\u001b[38;5;249m \u001b[0m\u001b[38;5;249m \u001b[0m\u001b[38;5;249ml\u001b[0m\u001b[38;5;249me\u001b[0m\u001b[38;5;249mt\u001b[0m\u001b[38;5;249m \u001b[0m\u001b[38;5;249ms\u001b[0m\u001b[38;5;249mt\u001b[0m\u001b[38;5;249mr\u001b[0m\u001b[38;5;249m:\u001b[0m\u001b[38;5;249m \u001b[0m\u001b[33m\"\u001b[0m\u001b[33mc\u001b[0m\u001b[33mo\u001b[0m\u001b[33mn\u001b[0m\u001b[33ms\u001b[0m\u001b[33mt\u001b[0m\u001b[33m \u001b[0m\u001b[33ms\u001b[0m\u001b[33mt\u001b[0m\u001b[33mr\u001b[0m\u001b[33mi\u001b[0m\u001b[33mn\u001b[0m\u001b[33mg\u001b[0m\u001b[33m\"\u001b[0m\u001b[31m \u001b[0m\u001b[31m=\u001b[0m\u001b[31m \u001b[0m\u001b[33m\"\u001b[0m\u001b[33mo\u001b[0m\u001b[33mt\u001b[0m\u001b[33mh\u001b[0m\u001b[33me\u001b[0m\u001b[33mr\u001b[0m\u001b[33m \u001b[0m\u001b[33mc\u001b[0m\u001b[33mo\u001b[0m\u001b[33mn\u001b[0m\u001b[33ms\u001b[0m\u001b[33mt\u001b[0m\u001b[33m \u001b[0m\u001b[33ms\u001b[0m\u001b[33mt\u001b[0m\u001b[33mr\u001b[0m\u001b[33mi\u001b[0m\u001b[33mn\u001b[0m\u001b[33mg\u001b[0m\u001b[33m\"\u001b[0m\u001b[38;5;249m;\u001b[0m\n \u001b[38;5;240m  \u2502\u001b[0m              \u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u252c\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[31m\u252c\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u252c\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m  \n \u001b[38;5;240m  \u2502\u001b[0m                     \u001b[33m\u2570\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m this requires the compile time known string 'const string'\n \u001b[38;5;240m  \u2502\u001b[0m                                \u001b[31m\u2502\u001b[0m        \u001b[33m\u2502\u001b[0m           \n \u001b[38;5;240m  \u2502\u001b[0m                                \u001b[31m\u2570\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m\u001b[31m\u2500\u001b[0m Expected value of type String [const \"const string\"].\n \u001b[38;5;240m  \u2502\u001b[0m                                         \u001b[33m\u2502\u001b[0m           \n \u001b[38;5;240m  \u2502\u001b[0m                                         \u001b[33m\u2570\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m this is a compile time known string, but it's 'other const string'\n \u001b[38;5;240m  \u2502\u001b[0m                                         \u001b[33m\u2502\u001b[0m           \n \u001b[38;5;240m  \u2502\u001b[0m                                         \u001b[33m\u2570\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m\u001b[33m\u2500\u001b[0m but got a value of type String [const \"other const string\"].\n\u001b[38;5;246m\u2500\u2500\u2500\u256f\u001b[0m\n\nthread 'main' panicked at src/parse/mod.rs:59:5:\nIncompatible Types\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
}