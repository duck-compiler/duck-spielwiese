struct List<T> = {
    elems: T[],
} impl {
    fn push(e: T) {
        go {
            self.elems = append(self.elems, e)
        }
    }

    fn map<U>(f: fn(v: T) -> U) -> List<U> {
        let res: List<U> = List<U> { elems: .U[] };
        go {
            for _, e := range self.elems {
                res.elems = append(res.elems, f(e))
            }
        }
        return res;
    }

    fn empty_copy() -> List<T> {
        return List<T> {
            elems: .T[],
        };
    }

};

fn print_with_go(x: {}) {
    go {
        switch x.(type) {
            case *List_List_DuckString:
                y, _ := x.(*List_List_DuckString)
                fmt.Println(y)
            default:
                fmt.Println(x)
        }
    }
}

fn main() {
    let list: List<String> = List<String> { elems: .String[] };

    list.push("yo");
    list.push("moin");

    print_with_go(
        list.map<Int>(fn(v: String) -> Int { return 100; })
            .map<String>(fn (v: Int) -> String { return "yooo"; })
    );
    print_with_go(list.map<Float>(fn(v: String) -> Float { return 100.0 }));
    print_with_go(list.map<Bool>(fn(v: String) -> Bool { return true }));
    print_with_go(list.map<String>(fn(v: String) -> String { return "" }));
    let list_of_lists_with_map: List<List<String>> = list.map<List<String>>(fn(v: String) -> List<String> { return List<String> { elems: .String["yo", "servus"] } });
    let list_of_list_of_lists_with_map: List<List<List<String>>> = list.map<List<List<String>>>(fn(v: String) -> List<List<String>> { return List<List<String>> { elems: .List<String>[ List<String> { elems: .String["a", "b", "c"] }, List<String> { elems: .String["100"] } ] } });

    print_with_go(list);

    let list_of_list: List<List<String>> = List<List<String>> { elems: .List<String>[] };
    list_of_list.push(List<String> {
        elems: ["ich", "bin", "liste", "1"],
    });
    list_of_list.push(list);

    go {
        for i := range list_of_list.elems {
            fmt.Println("list at index", i, list_of_list.elems[i])
        }

        fmt.Println()

        for i := range list_of_lists_with_map.elems {
            fmt.Println("list at index", i, list_of_lists_with_map.elems[i])
        }

        fmt.Println()

        for i := range list_of_list_of_lists_with_map.elems {
            for j := range list_of_list_of_lists_with_map.elems[i].elems {
                fmt.Println("list at index", i, j, list_of_list_of_lists_with_map.elems[i].elems[j])
            }
        }
    }
}
